//
// Copyright (c) 2010-2013 Apple Inc. All rights reserved.
//
// @APPLE_APACHE_LICENSE_HEADER_START@
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// @APPLE_APACHE_LICENSE_HEADER_END@
//

#include "<DEVELOPER_DIR>/Makefiles/CoreOS/Xcode/BSD.xcconfig"
#include "<DEVELOPER_DIR>/AppleInternal/XcodeConfig/PlatformSupport.xcconfig"

SDKROOT = macosx.internal
SUPPORTED_PLATFORMS = macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator
PRODUCT_NAME = libdispatch
EXECUTABLE_PREFIX =

SDK_INSTALL_VARIANT = $(SDK_INSTALL_VARIANT_$(DRIVERKIT))
SDK_INSTALL_VARIANT_1 = driverkit
SDK_INSTALL_VARIANT_ = default
SDK_INSTALL_ROOT = $(SDK_INSTALL_ROOT_$(SDK_INSTALL_VARIANT))
SDK_INSTALL_ROOT_driverkit = $(DRIVERKITROOT)
SDK_INSTALL_HEADERS_ROOT = $(SDK_INSTALL_HEADERS_ROOT_$(SDK_INSTALL_VARIANT))
SDK_INSTALL_HEADERS_ROOT_driverkit = $(SDK_INSTALL_ROOT)/$(SDK_RUNTIME_HEADERS_PREFIX)
SDK_RUNTIME_HEADERS_PREFIX = Runtime

INSTALL_PATH = $(SDK_INSTALL_ROOT)/usr/lib/system
PUBLIC_HEADERS_FOLDER_PATH = $(SDK_INSTALL_HEADERS_ROOT)/usr/include/dispatch
PRIVATE_HEADERS_FOLDER_PATH = $(SDK_INSTALL_HEADERS_ROOT)/usr/local/include/dispatch
OS_PUBLIC_HEADERS_FOLDER_PATH = $(SDK_INSTALL_HEADERS_ROOT)/usr/include/os
OS_PRIVATE_HEADERS_FOLDER_PATH = $(SDK_INSTALL_HEADERS_ROOT)/usr/local/include/os
HEADER_SEARCH_PATHS = $(PROJECT_DIR) $(PROJECT_DIR)/private $(PROJECT_DIR)/src
LIBRARY_SEARCH_PATHS = $(SDKROOT)/$(SDK_INSTALL_ROOT)/usr/lib/system $(SDKROOT)/$(SDK_INSTALL_ROOT)/usr/local/lib
SYSTEM_HEADER_SEARCH_PATHS = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks/System.framework/PrivateHeaders $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/local/include $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/include
SYSTEM_FRAMEWORK_SEARCH_PATHS = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks

INSTALLHDRS_SCRIPT_PHASE = YES
ALWAYS_SEARCH_USER_PATHS = NO
USE_HEADERMAP = NO
BUILD_VARIANTS = normal debug profile

ONLY_ACTIVE_ARCH = NO
CLANG_LINK_OBJC_RUNTIME = NO
GCC_C_LANGUAGE_STANDARD = gnu11
CLANG_CXX_LANGUAGE_STANDARD = gnu++11
ENABLE_STRICT_OBJC_MSGSEND = YES
GCC_ENABLE_CPP_EXCEPTIONS = NO
GCC_STRICT_ALIASING = YES
GCC_SYMBOLS_PRIVATE_EXTERN = YES
GCC_ENABLE_PASCAL_STRINGS = NO
GCC_WARN_SHADOW = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_UNUSED_VARIABLE = YES
CLANG_WARN_ASSIGN_ENUM = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_INFINITE_RECURSION = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES
CLANG_WARN_UNREACHABLE_CODE = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES
GCC_TREAT_WARNINGS_AS_ERRORS = YES
GCC_OPTIMIZATION_LEVEL = s
GCC_NO_COMMON_BLOCKS = YES
GCC_PREPROCESSOR_DEFINITIONS = __DARWIN_NON_CANCELABLE=1
GCC_PREPROCESSOR_DEFINITIONS[sdk=driverkit*] = $(GCC_PREPROCESSOR_DEFINITIONS) USE_OBJC=0
STATICLIB_PREPROCESSOR_DEFINITIONS = DISPATCH_VARIANT_STATIC=1 USE_OBJC=0 DISPATCH_USE_DTRACE=0

WARNING_CFLAGS =

// warnings we want
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wall
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wextra
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wmost
WARNING_CFLAGS = $(WARNING_CFLAGS) -Warray-bounds-pointer-arithmetic
WARNING_CFLAGS = $(WARNING_CFLAGS) -Watomic-properties
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wcomma
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wconditional-uninitialized
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wcovered-switch-default
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wdate-time
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wdeprecated
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wdouble-promotion
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wduplicate-enum
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wexpansion-to-defined
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wfloat-equal
WARNING_CFLAGS = $(WARNING_CFLAGS) -Widiomatic-parentheses
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wignored-qualifiers
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wnullable-to-nonnull-conversion
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wobjc-interface-ivars
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wover-aligned
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wpacked
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wpointer-arith
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wselector
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wstatic-in-inline
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wsuper-class-method-mismatch
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wswitch
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wtautological-compare
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wunused

// silenced warnings
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-unknown-warning-option
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-pedantic
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-bad-function-cast
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-c++-compat
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-c++98-compat
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-c++98-compat-pedantic
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-cast-align
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-cast-qual
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-disabled-macro-expansion
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-documentation-unknown-command
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-format-nonliteral
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-missing-variable-declarations
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-old-style-cast
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-padded
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-reserved-id-macro
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-shift-sign-overflow
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-undef
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-unreachable-code-aggressive
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-unused-macros
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-used-but-marked-unused
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-vla
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-unguarded-availability-new
WARNING_CFLAGS = $(WARNING_CFLAGS) -Wno-switch-enum // -Wswitch is enough, this forces explicit listing of all cases mandatory

OTHER_CFLAGS = -fverbose-asm $(PLATFORM_CFLAGS)
OTHER_CFLAGS[arch=i386][sdk=macosx*] = $(OTHER_CFLAGS) -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-exceptions
OTHER_CFLAGS_normal = -momit-leaf-frame-pointer
OTHER_CFLAGS_profile = $(OTHER_CFLAGS_normal) -DDISPATCH_PROFILE=1 -DDISPATCH_PERF_MON=1
OTHER_CFLAGS_debug = -fstack-protector -fno-inline -O0 -DDISPATCH_DEBUG=1 -DOS_DEBUG=1
GENERATE_PROFILING_CODE = NO
DYLIB_CURRENT_VERSION = $(CURRENT_PROJECT_VERSION)
SIM_SUFFIX[sdk=*simulator*] = _sim
DYLIB_LDFLAGS = -umbrella System -nodefaultlibs -ldyld -lcompiler_rt -lsystem$(SIM_SUFFIX)_kernel -lsystem$(SIM_SUFFIX)_platform -lsystem$(SIM_SUFFIX)_pthread -lsystem_malloc -lsystem_c -lsystem_blocks
UNWIND_LDFLAGS = -lunwind
UNWIND_LDFLAGS[sdk=driverkit*] =
OBJC_LDFLAGS = -Wl,-upward-lobjc
OBJC_LDFLAGS[sdk=driverkit*] =
LIBDARWIN_LDFLAGS = -Wl,-upward-lsystem_darwin
LIBDARWIN_LDFLAGS[sdk=*simulator*] =
LIBDARWIN_LDFLAGS[sdk=driverkit*] =
ORDER_LDFLAGS = -Wl,-order_file,$(SRCROOT)/xcodeconfig/libdispatch.order -Wl,-dirty_data_list,$(SRCROOT)/xcodeconfig/libdispatch.dirty
ORDER_LDFLAGS[sdk=macosx*] = -Wl,-order_file,$(SRCROOT)/xcodeconfig/libdispatch.order
ORDER_LDFLAGS[sdk=driverkit*] = -Wl,-order_file,$(SRCROOT)/xcodeconfig/libdispatch.order
ALIASES_LDFLAGS = -Wl,-alias_list,$(SRCROOT)/xcodeconfig/libdispatch.aliases
OTHER_LDFLAGS = $(OTHER_LDFLAGS) $(DYLIB_LDFLAGS) $(LIBDARWIN_LDFLAGS) $(CR_LDFLAGS) $(UNWIND_LDFLAGS) $(OBJC_LDFLAGS) $(ALIASES_LDFLAGS) $(PLATFORM_LDFLAGS) $(ORDER_LDFLAGS)
OTHER_MIGFLAGS = -novouchers -I$(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks/System.framework/PrivateHeaders -I${SDKROOT}/${SDK_INSTALL_HEADERS_ROOT}/usr/include -I${SDKROOT}/${SDK_INSTALL_HEADERS_ROOT}/usr/local/include

OBJC_SOURCE_FILE_NAMES = *.m
EXCLUDED_SOURCE_FILE_NAMES = $(EXCLUDED_SOURCE_FILE_NAMES_$(SDK_INSTALL_VARIANT))
EXCLUDED_SOURCE_FILE_NAMES_driverkit = $(EXCLUDED_SOURCE_FILE_NAMES_default) $(OBJC_SOURCE_FILE_NAMES)


COPY_HEADERS_RUN_UNIFDEF = YES
COPY_HEADERS_UNIFDEF_FLAGS = -U__DISPATCH_BUILDING_DISPATCH__ -U__linux__ -DTARGET_OS_WIN32=0 -U__ANDROID__
